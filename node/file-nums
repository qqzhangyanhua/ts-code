#! /usr/bin/env node

const fs = require("fs");
const path = require("path");
const { getMd5, getAllSize, getTypeof } = require("./utils/utils");
console.log("开始扫描=====");
const imgType = [".png", ".jpg", ".jpeg", ".gif"];
const countArr = [
  "js",
  "vue",
  "scss",
  "html",
  "less",
  "css",
  "json",
  "ts",
  "map",
  "jsx",
  "tsx",
];
const obj = {
  img: 0,
  imgMap: new Map(),
  imgArr: [],
  js: 0,
  jsMap: new Map(),
  jsArr: [],
  vue: 0,
  vueMap: new Map(),
  vueArr: [],
  json: 0,
  jsonMap: new Map(),
  jsonArr: [],
  css: 0,
  cssMap: new Map(),
  cssArr: [],
  scss: 0,
  scssMap: new Map(),
  scssArr: [],
  html: 0,
  htmlMap: new Map(),
  htmlArr: [],
  less: 0,
  lessMap: new Map(),
  lessArr: [],
  jsx: 0,
  jsxMap: new Map(),
  jsxArr: [],
  ts: 0,
  tsMap: new Map(),
  tsArr: [],
  tsx: 0,
  tsxMap: new Map(),
  tsxArr: [],
  map: 0,
  mapMap: new Map(),
  mapArr: [],
};
function handelProcess(fullFilePath, map, arr, file, size) {
  const hexHash = getMd5(fullFilePath);
  if (map.has(hexHash)) {
    const similar = map.get(hexHash).fullFilePath;
    arr.push({ similar, fullFilePath, size });
  } else {
    map.set(hexHash, { file, fullFilePath });
  }
}
function getNums(type, file, fullFilePath, size) {
  if (!type) return;
  const val = type.replace(".", "");
  if (!obj.hasOwnProperty(val)) return;

  if (countArr.includes(val)) {
    handelProcess(fullFilePath, obj[`${val}Map`], obj[`${val}Arr`], file, size);
    obj[val]++;
  }
}
const findSync = (pkg) => {
  sync = fs.readdirSync(pkg);
  sync.forEach((file) => {
    if (file === "node_modules") return;
    let fullFilePath = path.join(pkg, file);
    let fileStat = fs.statSync(fullFilePath);
    //是否还是文件夹,如果还是文件夹就递归处理
    if (fileStat.isDirectory()) {
      findSync(fullFilePath);
    } else {
      const ext = path.extname(file);
      getNums(ext, file, fullFilePath, fileStat.size);
      if (imgType.includes(ext)) {
        handelProcess(
          fullFilePath,
          obj.imgMap,
          obj.imgArr,
          file,
          fileStat.size
        );
        obj.img++;
      }
    }
  });
};
function getEntryFolder() {
  return process.argv[2];
}
function init() {
  const folder = getEntryFolder() || process.cwd();
  findSync(folder);
}
init();
function printAll(obj) {
  for (let key in obj) {
    const type = getTypeof(obj[key]);
    if (type === "Number" && obj[key] > 0) {
      console.log(`共有${key}文件`, obj[key]);
    } else if (type === "Array" && obj[key].length > 0) {
      console.log(`共有重复${key.replace("Arr", "")}`, obj[key].length);
    }
  }
  console.log("重复文件占用大小", getAllSize(obj));
}
printAll(obj);
function writeJson(data, name) {
  fs.writeFile(name, data, (err, data) => {
    if (err) {
      console.log("something wrong", err);
    }
  });
}

function writeResult(obj) {
  fs.mkdir("./file-num", (err) => {
    if (err) {
    }
  });
  for (const key in obj) {
    const type = getTypeof(obj[key]);
    if (type === "Array" && obj[key].length > 0) {
      writeJson(JSON.stringify(obj[key], null, 2), `./file-num/${key}.json`);
    }
  }
  console.log("生成扫描文件成功");
}
writeResult(obj);
